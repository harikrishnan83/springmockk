plugins {
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.spring' version "1.3.61"
    id 'org.jetbrains.kotlin.plugin.noarg' version "1.3.61"
    id 'org.springframework.boot' version "2.2.0.RELEASE" apply false
    id 'io.spring.dependency-management' version "1.0.10.RELEASE"
    id 'org.jetbrains.dokka' version "1.4.32"
    id 'com.jfrog.bintray' version "1.8.4"
}

group = "com.ninja-squad"
version = "2.0.3"
description = "MockBean and SpyBean, but for MockK instead of Mockito"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }

    test {
        useJUnitPlatform()
    }

    jar {
        manifest {
            attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "ninja-squad.com"
            )
        }
    }
}

dependencyManagement {
    imports {
        mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES) {
            bomProperty("kotlin.version", "1.3.61")
        }
    }
}

dependencies {
    api("io.mockk:mockk:1.9.3")

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.springframework.boot:spring-boot-test")
    implementation("org.springframework:spring-test")
    implementation("org.springframework:spring-context")

    testImplementation("org.assertj:assertj-core")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components["java"])

            pom {
                name.set(project.name)
                description.set(project.description)
                url.set("https://github.com/Ninja-Squad/springmockk")
                organization {
                    name.set("Ninja Squad")
                    url.set("http://ninja-squad.com")
                }
                licenses {
                    license {
                        name.set("Apache License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0")
                        distribution.set("repo")
                    }
                }
                developers {
                    developer {
                        id.set("jnizet")
                        name.set("Jean-Baptiste Nizet")
                        email.set("jb@ninja-squad.com")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/Ninja-Squad/springmockk")
                    developerConnection.set("scm:git:git://github.com/Ninja-Squad/springmockk")
                    url.set("https://github.com/Ninja-Squad/springmockk")
                }
            }
        }
    }
    repositories {
        maven {
            url = uri("$buildDir/repo")
        }
    }
}

//bintray {
//    user = "ninjasquad"
//    key = project.findProperty("bintray.key") as String?
//    setPublications("maven")
//    publish true
//    pkg = PackageConfig().apply {
//        repo = "maven"
//        name = project.name
//        desc = project.description
//        websiteUrl = "https://github.com/Ninja-Squad/springmockk"
//        issueTrackerUrl = "https://github.com/Ninja-Squad/springmockk/issues"
//        vcsUrl = "https://github.com/Ninja-Squad/springmockk"
//        setLicenses("Apache-2.0")
//        version = VersionConfig().apply {
//            gpg = GpgConfig().apply {
//                sign = true
//                passphrase = project.findProperty("signing.password") as String?
//            }
//            mavenCentralSync = MavenCentralSyncConfig().apply {
//                sync = true
//                user = project.findProperty("sonatypeUsername") as String?
//                password = project.findProperty("sonatypePassword") as String?
//            }
//        }
//    }
//}
